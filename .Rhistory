which python
[10**i for i in range(0, 5)]
[10**i for i in range(-5, 5)]
getwd()
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(kableExtra)
object <- {
"| Variable             | Type             | Description                                                                                                                            |
|----------------------|------------------|----------------------------------------------------------------------------------------------------------------------------------------|
| A1_score             | Int (0,1)        | Prompt: I often notice small sounds when others do not                                                                                 |
| A2_score             | Int (0,1)        | Prompt: I usually concentrate more on the whole picture, rather than the small details                                                 |
| A3_score             | Int (0,1)        | Prompt: I find it easy to do more than one thing at once                                                                               |
| A4_score             | Int (0,1)        | Prompt: If there is an interruption, I can switch back to what I was doing very quickly                                                |
| A5_score             | Int (0,1)        | Prompt: I find it easy to 'read between the lines' when someone is talking to me                                                       |
| A6_score             | Int (0,1)        | Prompt: I know how to tell if someone listening to me is getting bored                                                                 |
| A7_score             | Int (0,1)        | Prompt: When I'm reading a story I find it difficult to work out the characters' intentions                                            |
| A8_score             | Int (0,1)        | Prompt: I like to collect information about categories of things(e.g. types of car, types of bird, types of train, types of plant etc) |
| A9_score             | Int (0,1)        | Prompt: I find it easy to work out what someone is thinking or feeling just by looking at their face                                   |
| A10_score            | Int (0,1)        | Prompt: I find it difficult to work out people's intentions                                                                            |
| Age                  | Int              | Age of the individual                                                                                                                  |
| Gender               | String           | M (male) or F (female)                                                                                                                 |
| Ethnicity            | String           | Common Ethnicities defined for each individual                                                                                         |
| Born with Jaundice?  | String (yes,no)  | Was individual born with jaundice?                                                                                                     |
| Country of Residence | String           | Home country of individual                                                                                                             |
| Used app before?     | String (yes, no) | Has the user has used a screening app                                                                                                  |
| Result               | Int              | Cumulative score of the 10 survey Q's                                                                                                  |
| age_desc             | String           | Age Group                                                                                                                              |
| relation             | String           | Parent, self, caregiver, medical staff, clinician ,etc.                                                                                |
| ASD/Class            | String (yes, no) | App's classification based on result                                                                                                   |
| autism (Target Variable)  | String (yes, no) | Does individual have an autism diagnosis?
"
}
data_frame <- read_delim(object, delim = '|')
data_frame <- data_frame %>% select(-X5, -X1) %>% slice(-1)
knitr::kable(data_frame) %>% kable_styling(bootstrap_options = "condensed", full_width = F, fixed_thead = TRUE)
getwd()
read.arff(0)
read.arff()
library(foreign)
read.arff("../data/Autism-Adult-Data.arff")
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(corrplot)
install.packages("corrplot")
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(corrplot)
read.arff("../data/Autism-Adult-Data.arff")
df <- read.arff("../data/Autism-Adult-Data.arff")
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(corrplot)
library(foreign)
cor(df)
df <- read.arff("../data/Autism-Adult-Data.arff")
cor(df)
df
cor(df[1:10])
df[1:10]
cor(mtcars)
mtcars
df[1]
df[1][1]
df[1][1][1]
df[1, 1]
typeof(df[1,1])
typeof(mtcars[1,1])
as.double(df[1:10])
as.double(df[1])
as.double(df[[1]])
as.double(df[[1:10]])
as.double(df[[2]])
typeof(df[2])
typeof(df[[2]])
df[1:10] <- sapply(df[1:10], as.double)
typeof(df[1])
typeof(df[[1]])
df
cor(df[1:10])
head(df)
# Convert numeric columns to 'double' type
df[1:11] <- sapply(df[1:11], as.double)
cor(df[1:11])
# Convert numeric columns to 'double' type
df[1:11] <- sapply(df[1:11], as.double)
autism_corr <- cor(df[1:11])
# Round the values to 2 decimal places
autism_corr <- round(autism_corr,2)
corrplot(autism_corr, type="upper", method="color", tl.srt=45)
# Convert numeric columns to 'double' type
df[1:10] <- sapply(df[1:10], as.double)
autism_corr <- cor(df[1:10])
# Round the values to 2 decimal places
autism_corr <- round(autism_corr,2)
corrplot(autism_corr, type="upper", method="color", tl.srt=45)
df_autism  %>%
ggplot(aes(x=ethnicity, fill=autism))+
geom_bar(stat="count", position = "dodge")
df  %>%
ggplot(aes(x=ethnicity, fill=autism))+
geom_bar(stat="count", position = "dodge")
head(df)
df  %>%
ggplot(aes(x=ethnicity, fill=austim))+
geom_bar(stat="count", position = "dodge")
df  %>%
ggplot(aes(x=ethnicity, fill=austim))+
geom_bar(stat="count", position = "dodge")+
labs(x = "Ethnicity", y = "Count", title = "Occurence of Autism by Ethnicity") +
scale_fill_discrete(label="test")
df  %>%
ggplot(aes(x=ethnicity, fill=austim))+
geom_bar(stat="count", position = "dodge")+
labs(x = "Ethnicity", y = "Count", title = "Occurence of Autism by Ethnicity") +
scale_fill_discrete(title="test")
df  %>%
ggplot(aes(x=ethnicity, fill=austim))+
geom_bar(stat="count", position = "dodge")+
labs(x = "Ethnicity", y = "Count", title = "Occurence of Autism by Ethnicity") +
scale_fill_discrete()
df  %>%
ggplot(aes(x=ethnicity, fill=austim))+
geom_bar(stat="count", position = "dodge")+
labs(x = "Ethnicity", y = "Count", title = "Occurence of Autism by Ethnicity") +
scale_fill_discrete(name="test")
df  %>%
ggplot(aes(x=ethnicity, fill=austim))+
geom_bar(stat="count", position = "dodge")+
labs(x = "Ethnicity", y = "Count", title = "Occurence of Autism by Ethnicity") +
scale_fill_discrete(name="Autism")
df  %>%
ggplot(aes(x=ethnicity, fill=austim))+
geom_bar(stat="count", position = "dodge")+
labs(x = "Ethnicity", y = "Count", title = "Occurence of Autism by Ethnicity") +
scale_fill_discrete(name="Autism") +
theme_bw(20)
df  %>%
ggplot(aes(x=ethnicity, fill=austim))+
geom_bar(stat="count", position = "dodge")+
labs(x = "Ethnicity", y = "Count", title = "Occurence of Autism by Ethnicity") +
scale_fill_discrete(name="Autism") +
theme_bw(20) +
theme(axis.text.x=element_text(angle=45))
df  %>%
ggplot(aes(x=ethnicity, fill=austim))+
geom_bar(stat="count", position = "dodge")+
labs(x = "Ethnicity", y = "Count", title = "Occurence of Autism by Ethnicity") +
scale_fill_discrete(name="Autism") +
theme_bw(20) +
theme(axis.text.x=element_text(angle=90))
df  %>%
ggplot(aes(x=ethnicity, fill=austim))+
geom_bar(stat="count", position = "dodge")+
labs(x = "Ethnicity", y = "Count", title = "Occurence of Autism by Ethnicity") +
scale_fill_discrete(name="Autism") +
theme_bw(20) +
coord_flip()
df  %>%
ggplot(aes(x=ethnicity, fill=austim))+
geom_bar(stat="count", position = "dodge")+
labs(x = "Ethnicity", y = "Count", title = "Occurence of Autism by Ethnicity") +
scale_fill_discrete(name="Autism") +
theme_bw(18) +
coord_flip()
#    theme(axis.text.x=element_text(angle=90))
df%>%
ggplot()+
geom_bar(mapping = aes(x=as.factor(result), fill = austim),
position = "fill")+
ylab("Proportion of Participants")+
xlab("ASD-10 Test Score")+
ggtitle("Proportion of Participants by ASD-10 Test Score")+
scale_fill_brewer(name = "Diagnosed \nwith Autism", palette = "Paired")
df%>%
ggplot()+
geom_bar(mapping = aes(x=as.factor(result), fill = austim),
position = "fill")+
ylab("Proportion of Participants")+
xlab("ASD-10 Test Score")+
ggtitle("Proportion of Participants by ASD-10 Test Score")+
scale_fill_brewer(name = "Diagnosed \nwith Autism", palette = "Paired") +
theme_bw(20)
corrplot(autism_corr, type="upper", method="color", tl.srt=45, tl.col = "blue")
df%>%
ggplot()+
geom_bar(mapping = aes(x=as.factor(result), fill = austim),
position = "fill")+
ylab("Proportion of Participants")+
xlab("ASD-10 Test Score")+
ggtitle("Proportion of Participants by ASD-10 Test Score")+
scale_fill_brewer(name = "Diagnosed \nwith Autism", palette = "Paired") +
theme_bw(20)
df%>%
ggplot()+
geom_bar(mapping = aes(x=as.factor(result), fill = austim),
position = "fill")+
ylab("Proportion of Participants")+
xlab("ASD-10 Test Score")+
ggtitle("Proportion of Participants by \nASD-10 Test Score")+
scale_fill_brewer(name = "Diagnosed \nwith Autism", palette = "Paired") +
theme_bw(20)
# Convert numeric columns to 'double' type
df[1:10] <- sapply(df[1:10], as.double)
autism_corr <- cor(df[1:10])
# Round the values to 2 decimal places
autism_corr <- round(autism_corr,2)
corrplot(autism_corr,
type="upper",
method="color",
tl.srt=45,
tl.col = "blue",
diag = FALSE)
library(devtools)
library(tidyverse)
library(fs)
create_package("~/matt/Desktop/prepR")
create_package("~/matt/Desktop/PrepR")
create_package("~/Desktop/PrepR")
use_mit_license("Matt Connell")
document()
library(devtools)
document()
library(devtools)
library(tidyverse)
library(fs)
create_package("/Users/matt/Desktop/MDS_Labs/Block5/524/prepr")
cwd("/Users/matt/Desktop/MDS_Labs/Block5/524/PrepR")
setwd("/Users/matt/Desktop/MDS_Labs/Block5/524/PrepR")
getwd()
library(devtools)
create_package("~/Desktop/MDS_Labs/Block5/524/PrepR")
install.packages("forecast")
